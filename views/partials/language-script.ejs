<!-- Google Translate Script and Language Functionality -->
<style>
  /* Language Success Popup Styles */
  .lang-popup-overlay {
    position: fixed;
    top: 20px;
    left: 20px;
    z-index: 10000;
    animation: slideInLeft 0.3s ease-out;
  }
  
  .lang-popup-card {
    background: #28a745;
    color: white;
    padding: 15px 20px;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    min-width: 250px;
    position: relative;
  }
  
  .lang-popup-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 8px;
  }
  
  .lang-popup-title {
    font-weight: 600;
    font-size: 14px;
  }
  
  .lang-popup-close {
    background: none;
    border: none;
    color: white;
    font-size: 18px;
    cursor: pointer;
    padding: 0;
    width: 20px;
    height: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .lang-popup-body {
    font-size: 13px;
    opacity: 0.9;
  }
  
  .lang-popup-overlay.hide {
    animation: slideOutLeft 0.3s ease-in forwards;
  }
  
  @keyframes slideInLeft {
    from {
      transform: translateX(-100%);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }
  
  @keyframes slideOutLeft {
    from {
      transform: translateX(0);
      opacity: 1;
    }
    to {
      transform: translateX(-100%);
      opacity: 0;
    }
  }
  
  /* Ensure dropdown menu is visible when shown */
  .dropdown-menu.show {
    display: block !important;
    opacity: 1 !important;
    visibility: visible !important;
  }

  /* Cart Icon Styles */
  #cartButton {
    border: 2px solid #dee2e6;
    background: white;
    transition: all 0.3s ease;
    padding: 8px 12px;
  }
  
  #cartButton:hover {
    border-color: #007bff;
    background-color: #f8f9fa;
    transform: translateY(-1px);
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }
  
  #cartButton:active {
    transform: translateY(0);
  }
  
  #cartCount {
    min-width: 18px;
    height: 18px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 600;
  }
  
  #cartButton svg {
    transition: transform 0.2s ease;
  }
  
  #cartButton:hover svg {
    transform: scale(1.1);
  }
  
  /* Fix for language dropdown specifically */
  #langDropdownToggle + .dropdown-menu {
    position: absolute;
    top: 100%;
    left: 0;
    z-index: 1000;
    min-width: 200px;
    max-height: 300px;
    overflow-y: auto;
    padding: 0.5rem 0;
    margin: 0.125rem 0 0;
    background-color: #fff;
    border: 1px solid rgba(0,0,0,.15);
    border-radius: 0.375rem;
    box-shadow: 0 0.5rem 1rem rgba(0,0,0,.175);
  }
  
  /* Style for language dropdown items */
  .dropdown-menu .lang-option {
    padding: 0.5rem 1rem;
    font-size: 0.9rem;
    white-space: nowrap;
    transition: background-color 0.2s ease;
  }
  
  .dropdown-menu .lang-option:hover {
    background-color: #f8f9fa;
  }
  
  /* Scrollbar styling for language dropdown */
  .dropdown-menu::-webkit-scrollbar {
    width: 6px;
  }
  
  .dropdown-menu::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 3px;
  }
  
  .dropdown-menu::-webkit-scrollbar-thumb {
    background: #c1c1c1;
    border-radius: 3px;
  }
  
  .dropdown-menu::-webkit-scrollbar-thumb:hover {
    background: #a8a8a8;
  }
</style>
<script>
  // Define Google Translate init BEFORE loading the external script
  window.googleTranslateElementInit = function() {
    try {
      console.log('Initializing Google Translate...');
      const element = document.getElementById('google_translate_element');
      if (element) {
        new google.translate.TranslateElement({
          pageLanguage: 'en',
          includedLanguages: 'ar,zh-CN,zh-TW,fr,de,it,ms,ru,es,pt,ja,ko,hi,th,vi,tr,pl,nl,sv,no,da,fi,cs,hu,ro,bg,hr,sk,sl,et,lv,lt,uk,be,id,tl,he,fa,ur,bn,ta,te,ml,kn,gu,pa,mr',
          layout: google.translate.TranslateElement.InlineLayout.SIMPLE,
          autoDisplay: false
        }, 'google_translate_element');
        console.log('Google Translate initialized successfully');
      } else {
        console.log('Google Translate element not found');
      }
    } catch (e) {
      console.log('Google Translate initialization failed:', e);
    }

    // Restore saved language after widget mounts
    const saved = localStorage.getItem('selectedLanguage');
    if (saved && saved !== 'en') {
      setTimeout(function(){ 
        if (window.applyLanguage) {
          window.applyLanguage(saved);
        }
        if (window.updateLanguageButton) {
          window.updateLanguageButton(saved);
        }
      }, 500);
    }
    
    // Listen for Google Translate language changes
    if (typeof google !== 'undefined' && google.translate) {
      // Check for language changes periodically
      setInterval(function() {
        const googtransCookie = document.cookie.split(';').find(c => c.trim().startsWith('googtrans='));
        if (googtransCookie) {
          const lang = googtransCookie.split('=')[1].split('/')[2];
          if (lang && lang !== 'en') {
            localStorage.setItem('selectedLanguage', lang);
            if (window.updateLanguageButton) {
              window.updateLanguageButton(lang);
            }
          }
        }
      }, 1000);
    }
  };

  // Helper to set language reliably (retries until select appears)
  window.applyLanguage = function(lang, onSuccess) {
    console.log('Applying language:', lang);
    
    // First, try to set the cookie directly
    try {
      document.cookie = 'googtrans=/en/' + lang + '; path=/; expires=' + new Date(Date.now() + 365*24*60*60*1000).toUTCString();
      localStorage.setItem('selectedLanguage', lang);
      console.log('Language cookie set successfully');
    } catch(e) {
      console.log('Cookie setting failed:', e);
    }
    
    var attempts = 0;
    function trySet(){
      attempts++;
      var select = document.querySelector('#google_translate_element select');
      console.log('Attempt', attempts, 'to find Google Translate select:', !!select);
      
      if (select && select.options && select.options.length) {
        console.log('Google Translate select found with', select.options.length, 'options');
        for (var i = 0; i < select.options.length; i++) {
          var opt = select.options[i];
          if (opt.value === lang) {
            select.selectedIndex = i;
            select.dispatchEvent(new Event('change', { bubbles: true }));
            localStorage.setItem('selectedLanguage', lang);
            if (window.updateLanguageButton) {
              window.updateLanguageButton(lang);
            }
            console.log('Language applied successfully via Google Translate');
            if (typeof onSuccess === 'function') onSuccess();
            return;
          }
        }
      }
      
      if (attempts < 3) {
        console.log('Retrying in 1000ms...');
        setTimeout(trySet, 1000);
      } else {
        console.log('Google Translate not available, using fallback');
        // Fallback: reload page with language cookie
        if (typeof onSuccess === 'function') onSuccess();
      }
    }
    trySet();
  };

  window.getLanguageName = function(code){
    var map = { 
      'en': 'ðŸ‡ºðŸ‡¸ English', 'fr': 'ðŸ‡«ðŸ‡· French', 'de': 'ðŸ‡©ðŸ‡ª German', 'it': 'ðŸ‡®ðŸ‡¹ Italian', 
      'es': 'ðŸ‡ªðŸ‡¸ Spanish', 'pt': 'ðŸ‡µðŸ‡¹ Portuguese', 'ru': 'ðŸ‡·ðŸ‡º Russian', 
      'zh-CN': 'ðŸ‡¨ðŸ‡³ Chinese (Simplified)', 'zh-TW': 'ðŸ‡¹ðŸ‡¼ Chinese (Traditional)',
      'ja': 'ðŸ‡¯ðŸ‡µ Japanese', 'ko': 'ðŸ‡°ðŸ‡· Korean', 'ar': 'ðŸ‡¸ðŸ‡¦ Arabic', 'hi': 'ðŸ‡®ðŸ‡³ Hindi',
      'th': 'ðŸ‡¹ðŸ‡­ Thai', 'vi': 'ðŸ‡»ðŸ‡³ Vietnamese', 'tr': 'ðŸ‡¹ðŸ‡· Turkish', 'pl': 'ðŸ‡µðŸ‡± Polish',
      'nl': 'ðŸ‡³ðŸ‡± Dutch', 'sv': 'ðŸ‡¸ðŸ‡ª Swedish', 'no': 'ðŸ‡³ðŸ‡´ Norwegian', 'da': 'ðŸ‡©ðŸ‡° Danish',
      'fi': 'ðŸ‡«ðŸ‡® Finnish', 'cs': 'ðŸ‡¨ðŸ‡¿ Czech', 'hu': 'ðŸ‡­ðŸ‡º Hungarian', 'ro': 'ðŸ‡·ðŸ‡´ Romanian',
      'bg': 'ðŸ‡§ðŸ‡¬ Bulgarian', 'hr': 'ðŸ‡­ðŸ‡· Croatian', 'sk': 'ðŸ‡¸ðŸ‡° Slovak', 'sl': 'ðŸ‡¸ðŸ‡® Slovenian',
      'et': 'ðŸ‡ªðŸ‡ª Estonian', 'lv': 'ðŸ‡±ðŸ‡» Latvian', 'lt': 'ðŸ‡±ðŸ‡¹ Lithuanian', 'uk': 'ðŸ‡ºðŸ‡¦ Ukrainian',
      'be': 'ðŸ‡§ðŸ‡¾ Belarusian', 'ms': 'ðŸ‡²ðŸ‡¾ Malay', 'id': 'ðŸ‡®ðŸ‡© Indonesian', 'tl': 'ðŸ‡µðŸ‡­ Filipino',
      'he': 'ðŸ‡®ðŸ‡± Hebrew', 'fa': 'ðŸ‡®ðŸ‡· Persian', 'ur': 'ðŸ‡µðŸ‡° Urdu', 'bn': 'ðŸ‡§ðŸ‡© Bengali',
      'ta': 'ðŸ‡®ðŸ‡³ Tamil', 'te': 'ðŸ‡®ðŸ‡³ Telugu', 'ml': 'ðŸ‡®ðŸ‡³ Malayalam', 'kn': 'ðŸ‡®ðŸ‡³ Kannada',
      'gu': 'ðŸ‡®ðŸ‡³ Gujarati', 'pa': 'ðŸ‡®ðŸ‡³ Punjabi', 'mr': 'ðŸ‡®ðŸ‡³ Marathi'
    };
    return map[code] || 'ðŸ‡ºðŸ‡¸ English';
  };

  // Function to update language button text
  window.updateLanguageButton = function(lang) {
    const toggle = document.getElementById('langDropdownToggle');
    if (toggle) {
      const languageName = getLanguageName(lang);
      toggle.textContent = languageName;
      console.log('Language button updated to:', languageName);
    }
  };

  // Function to translate page content directly
  window.translatePageContent = function(targetLang) {
    console.log('Translating page content to:', targetLang);
    
    // Get all text content that should be translated
    const textElements = document.querySelectorAll('h1, h2, h3, h4, h5, h6, p, span, a, button, li, td, th, label, div:not([class*="translate"]):not([id*="translate"])');
    
    // Store original text for each element
    const originalTexts = new Map();
    textElements.forEach((element, index) => {
      if (element.textContent.trim() && !element.querySelector('img, svg, input, select, textarea')) {
        originalTexts.set(index, element.textContent);
      }
    });
    
    // Apply Google Translate styling to hide the widget
    const style = document.createElement('style');
    style.textContent = `
      .goog-te-banner-frame { display: none !important; }
      .goog-te-menu-value { display: none !important; }
      .goog-te-gadget { display: none !important; }
      .goog-te-combo { display: none !important; }
      body { top: 0 !important; }
    `;
    document.head.appendChild(style);
    
    // Set the translation cookie
    document.cookie = `googtrans=/en/${targetLang}; path=/; expires=${new Date(Date.now() + 365*24*60*60*1000).toUTCString()}`;
    
    // Force Google Translate to re-translate
    if (typeof google !== 'undefined' && google.translate) {
      try {
        // Trigger Google Translate refresh
        const translateElement = document.querySelector('#google_translate_element');
        if (translateElement) {
          const selectElement = translateElement.querySelector('select');
          if (selectElement) {
            // Find and select the target language
            for (let i = 0; i < selectElement.options.length; i++) {
              if (selectElement.options[i].value === targetLang) {
                selectElement.selectedIndex = i;
                selectElement.dispatchEvent(new Event('change', { bubbles: true }));
                console.log('Google Translate triggered for:', targetLang);
                return true;
              }
            }
          }
        }
      } catch (error) {
        console.log('Google Translate API error:', error);
      }
    }
    
    return false;
  };

  // Cart functionality
  function initializeCart() {
    const cartButton = document.getElementById('cartButton');
    const cartCount = document.getElementById('cartCount');
    
    if (cartButton && cartCount) {
      // Load cart count from localStorage
      const cartItems = JSON.parse(localStorage.getItem('cartItems') || '[]');
      updateCartCount(cartItems.length);
      
      // Add click event to cart button
      cartButton.addEventListener('click', function() {
        console.log('Cart button clicked');
        // You can add cart modal or redirect to cart page here
        // For now, just show an alert
        if (cartItems.length === 0) {
          alert('Your cart is empty!');
        } else {
          alert(`You have ${cartItems.length} item(s) in your cart.`);
        }
      });
    }
  }
  
  function updateCartCount(count) {
    const cartCount = document.getElementById('cartCount');
    if (cartCount) {
      cartCount.textContent = count;
      cartCount.style.display = count > 0 ? 'block' : 'none';
    }
  }
  
  // Make updateCartCount globally available
  window.updateCartCount = updateCartCount;
  
  // Function to add item to cart
  window.addToCart = function(item) {
    const cartItems = JSON.parse(localStorage.getItem('cartItems') || '[]');
    
    // Check if item already exists
    const existingItem = cartItems.find(cartItem => cartItem.id === item.id);
    
    if (existingItem) {
      existingItem.quantity += item.quantity || 1;
    } else {
      cartItems.push({
        id: item.id,
        name: item.name,
        price: item.price,
        quantity: item.quantity || 1,
        image: item.image || '',
        addedAt: new Date().toISOString()
      });
    }
    
    // Save to localStorage
    localStorage.setItem('cartItems', JSON.stringify(cartItems));
    
    // Update cart count
    updateCartCount(cartItems.length);
    
    // Show success message
    console.log('Item added to cart:', item.name);
    
    // You can add a toast notification here
    return true;
  };
  
  // Function to remove item from cart
  window.removeFromCart = function(itemId) {
    const cartItems = JSON.parse(localStorage.getItem('cartItems') || '[]');
    const updatedItems = cartItems.filter(item => item.id !== itemId);
    
    localStorage.setItem('cartItems', JSON.stringify(updatedItems));
    updateCartCount(updatedItems.length);
    
    return true;
  };
  
  // Function to get cart items
  window.getCartItems = function() {
    return JSON.parse(localStorage.getItem('cartItems') || '[]');
  };
  
  // Function to clear cart
  window.clearCart = function() {
    localStorage.removeItem('cartItems');
    updateCartCount(0);
    return true;
  };
  
  // Test function for adding items to cart
  window.testAddToCart = function() {
    const testItem = {
      id: 'hiking-tour-' + Date.now(),
      name: 'Hiking Adventure Tour',
      price: 99.99,
      quantity: 1,
      image: '/images/hiking-tour.jpg'
    };
    
    if (window.addToCart) {
      window.addToCart(testItem);
      alert('Test item added to cart! Check the cart icon in the navbar.');
    } else {
      alert('Cart functionality not available yet.');
    }
  };

  // Language functionality
  document.addEventListener('DOMContentLoaded', function() {
    function showSuccessPopup(lang){
      const overlay = document.createElement('div');
      overlay.className = 'lang-popup-overlay';
      overlay.innerHTML = '<div class="lang-popup-card">\
        <div class="lang-popup-header">\
          <span class="lang-popup-title">Language Updated</span>\
          <button class="lang-popup-close" aria-label="Close">Ã—</button>\
        </div>\
        <div class="lang-popup-body">Page translated to <strong>'+getLanguageName(lang)+'</strong></div>\
      </div>';
      document.body.appendChild(overlay);
      const closeBtn = overlay.querySelector('.lang-popup-close');
      function close(){ overlay.classList.add('hide'); setTimeout(()=>overlay.remove(), 220); }
      closeBtn.addEventListener('click', close);
      setTimeout(close, 3000);
    }

    // Simple function to initialize language functionality
    let isInitialized = false;
    
    function initLanguageDropdown() {
      if (isInitialized) {
        console.log('Language dropdown already initialized, skipping...');
        return;
      }
      
      console.log('=== LANGUAGE DROPDOWN DEBUG ===');
      console.log('Current URL:', window.location.href);
      
      const langToggleEl = document.getElementById('langDropdownToggle');
      const langOptions = document.querySelectorAll('.lang-option');
      
      if (!langToggleEl || langOptions.length === 0) {
        console.log('Elements not ready, retrying...');
        setTimeout(initLanguageDropdown, 500);
        return;
      }
      
      console.log('âœ… All elements found, initializing...');
      isInitialized = true;
      
      // Remove any existing event listeners to prevent duplicates
      const newToggle = langToggleEl.cloneNode(true);
      langToggleEl.parentNode.replaceChild(newToggle, langToggleEl);
      const freshToggle = document.getElementById('langDropdownToggle');
      
      // Simple manual dropdown toggle (no Bootstrap dependency)
      let isOpen = false;
      
      freshToggle.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        
        const dropdown = this.closest('.dropdown');
        const menu = dropdown.querySelector('.dropdown-menu');
        
        isOpen = !isOpen;
        
        if (isOpen) {
          menu.classList.add('show');
          this.setAttribute('aria-expanded', 'true');
          console.log('Dropdown opened manually');
        } else {
          menu.classList.remove('show');
          this.setAttribute('aria-expanded', 'false');
          console.log('Dropdown closed manually');
        }
      });
      
      // Close dropdown when clicking outside
      document.addEventListener('click', function(e) {
        if (freshToggle && freshToggle.contains && !freshToggle.contains(e.target)) {
          const dropdown = freshToggle.closest('.dropdown');
          if (dropdown && !dropdown.contains(e.target)) {
            const menu = dropdown.querySelector('.dropdown-menu');
            if (menu) {
              menu.classList.remove('show');
              freshToggle.setAttribute('aria-expanded', 'false');
              isOpen = false;
            }
          }
        }
      });
      
      // Attach click handlers to language options
      langOptions.forEach((option, index) => {
        option.addEventListener('click', function(e) {
          e.preventDefault();
          const lang = this.getAttribute('data-lang');
          
          if (!lang) return;
          
          console.log('Language selected:', lang);
          
          // Update button text immediately
          if (freshToggle) {
            const languageName = getLanguageName(lang);
            freshToggle.textContent = languageName;
            console.log('Button text updated to:', languageName);
          }
          
          // Close dropdown
          const dropdown = freshToggle ? freshToggle.closest('.dropdown') : null;
          if (dropdown) {
            const menu = dropdown.querySelector('.dropdown-menu');
            if (menu) {
              menu.classList.remove('show');
              if (freshToggle) {
                freshToggle.setAttribute('aria-expanded', 'false');
              }
              isOpen = false;
            }
          }
          
          // Apply language translation
          console.log('Applying language translation for:', lang);
          
          // Set language preference
          localStorage.setItem('selectedLanguage', lang);
          document.cookie = 'googtrans=/en/' + lang + '; path=/; expires=' + new Date(Date.now() + 365*24*60*60*1000).toUTCString();
          
          // Show success popup
          showSuccessPopup(lang);
          
          // Try to translate immediately without page reload
          console.log('Attempting immediate translation to:', lang);
          
          // Use the new translation function
          if (window.translatePageContent) {
            if (window.translatePageContent(lang)) {
              console.log('Page translated successfully to:', lang);
            } else {
              console.log('Translation failed, using fallback reload');
              setTimeout(() => location.reload(), 1000);
            }
          } else {
            console.log('Translation function not available, using fallback reload');
            setTimeout(() => location.reload(), 1000);
          }
        });
      });
      
      // Restore saved language
      const saved = localStorage.getItem('selectedLanguage');
      if (saved && freshToggle) {
        const languageName = getLanguageName(saved);
        freshToggle.textContent = languageName;
        console.log('Restored saved language:', saved, '->', languageName);
      }
      
      // Show success popup if just changed
      const justChanged = sessionStorage.getItem('langChanged') === '1';
      const changedTo = sessionStorage.getItem('langChangedTo');
      if (justChanged && changedTo) {
        showSuccessPopup(changedTo);
        sessionStorage.removeItem('langChanged');
        sessionStorage.removeItem('langChangedTo');
      }
      
      console.log('=== LANGUAGE DROPDOWN INITIALIZATION COMPLETE ===');
    }
    
    // Initialize with a single call and retry if needed
    initLanguageDropdown();
    setTimeout(initLanguageDropdown, 2000); // Single retry
    
    // Initialize cart functionality
    initializeCart();
    
    // Ensure Google Translate loads
    setTimeout(() => {
      if (typeof google === 'undefined' || !google.translate) {
        console.log('Google Translate not loaded, retrying...');
        const script = document.createElement('script');
        script.src = '//translate.google.com/translate_a/element.js?cb=googleTranslateElementInit';
        script.async = true;
        document.head.appendChild(script);
      }
    }, 3000);
    
    // Global language functionality - ensure it works on all pages
    window.initLanguageDropdown = initLanguageDropdown;
    
    // Re-initialize when navigating between pages (for SPA-like behavior)
    window.addEventListener('popstate', function() {
      setTimeout(initLanguageDropdown, 100);
    });
    
    // Additional debugging - check if basic dropdown works
    setTimeout(() => {
      const toggle = document.getElementById('langDropdownToggle');
      if (toggle) {
        console.log('Testing basic dropdown functionality...');
        console.log('Toggle element classes:', toggle.className);
        console.log('Toggle element attributes:', toggle.attributes);
        
        // Test if clicking the toggle works
        toggle.addEventListener('click', function(e) {
          console.log('Toggle clicked - checking dropdown state...');
          const dropdown = this.closest('.dropdown');
          const menu = dropdown.querySelector('.dropdown-menu');
          console.log('Dropdown menu classes:', menu.className);
          console.log('Menu has "show" class:', menu.classList.contains('show'));
        });
      }
    }, 3000);
  });
</script>
<script id="google-translate-script" src="//translate.google.com/translate_a/element.js?cb=googleTranslateElementInit"></script>
<div id="google_translate_element" style="display:none"></div>
